# OpenAPI inicial del MVP de password-danie (auth + vault + health/ready).
openapi: 3.0.3
info:
  title: password-danie API
  version: 0.1.0
servers:
  - url: http://localhost:8080
paths:
  /healthz:
    get:
      summary: Liveness
      responses:
        "200": { description: OK }
  /readyz:
    get:
      summary: Readiness (DB)
      responses:
        "200": { description: OK }

  /api/v1/auth/register:
    post:
      summary: Registro
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email: { type: string, format: email }
                password: { type: string, minLength: 8 }
      responses:
        "201": { description: Created }
        "400": { description: Bad request }

  /api/v1/auth/login:
    post:
      summary: Login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email: { type: string, format: email }
                password: { type: string }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token: { type: string }
                  user:
                    type: object
                    properties:
                      id: { type: integer }
                      email: { type: string }

  /api/v1/users/me:
    get:
      summary: Perfil propio
      security: [{ bearerAuth: [] }]
      responses:
        "200": { description: OK }
        "401": { description: Unauthorized }

  /api/v1/vault/entries:
    get:
      summary: Listar secretos
      security: [{ bearerAuth: [] }]
      parameters:
        - in: query; name: q; schema: { type: string }
        - in: query; name: domain; schema: { type: string }
        - in: query; name: limit; schema: { type: integer, default: 20 }
        - in: query; name: offset; schema: { type: integer, default: 0 }
      responses:
        "200": { description: OK }
        "401": { description: Unauthorized }
    post:
      summary: Crear secreto
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [username, password_plain]
              properties:
                username: { type: string }
                password_plain: { type: string }
                url: { type: string }
                notes: { type: string }
                icon: { type: string }
                title: { type: string }
      responses:
        "201": { description: Created }
        "401": { description: Unauthorized }

  /api/v1/vault/entries/{id}:
    get:
      summary: Obtener secreto
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path; name: id; required: true; schema: { type: integer }
      responses:
        "200": { description: OK }
        "404": { description: Not found }
        "401": { description: Unauthorized }
    put:
      summary: Actualizar secreto
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path; name: id; required: true; schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username: { type: string }
                password_plain: { type: string }
                url: { type: string }
                notes: { type: string }
                icon: { type: string }
                title: { type: string }
      responses:
        "200": { description: OK }
        "404": { description: Not found }
        "401": { description: Unauthorized }
    delete:
      summary: Eliminar secreto
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path; name: id; required: true; schema: { type: integer }
      responses:
        "200": { description: OK }
        "401": { description: Unauthorized }

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
